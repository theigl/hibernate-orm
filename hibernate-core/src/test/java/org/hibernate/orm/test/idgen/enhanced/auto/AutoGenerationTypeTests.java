/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
 */
package org.hibernate.orm.test.idgen.enhanced.auto;

import java.util.Collection;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.CollectionId;
import org.hibernate.annotations.Type;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.AvailableSettings;
import org.hibernate.dialect.H2Dialect;
import org.hibernate.id.IdentifierGenerator;
import org.hibernate.id.IncrementGenerator;
import org.hibernate.id.UUIDGenerator;
import org.hibernate.id.enhanced.DatabaseStructure;
import org.hibernate.id.enhanced.SequenceStyleGenerator;
import org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory;
import org.hibernate.mapping.IdentifierBag;
import org.hibernate.mapping.KeyValue;
import org.hibernate.mapping.PersistentClass;
import org.hibernate.mapping.Property;
import org.hibernate.service.spi.ServiceRegistryImplementor;
import org.hibernate.tool.schema.Action;

import org.hibernate.testing.orm.junit.FailureExpectedExtension;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.Matchers.equalToIgnoringCase;
import static org.junit.Assert.assertThat;

/**
 * @author Steve Ebersole
 */
@ExtendWith( FailureExpectedExtension.class )
public class AutoGenerationTypeTests {
	@Test
	public void testAutoDefaults() {
		final StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder();
		final StandardServiceRegistry ssr = ssrb.build();

		final Metadata metadata = new MetadataSources( ssr )
				.addAnnotatedClass( Entity1.class )
				.addAnnotatedClass( Entity2.class )
				.buildMetadata();

		final DefaultIdentifierGeneratorFactory generatorFactory = new DefaultIdentifierGeneratorFactory();
		generatorFactory.injectServices( (ServiceRegistryImplementor) ssr );

		final PersistentClass entityBinding = metadata.getEntityBinding( Entity1.class.getName() );
		final KeyValue idMapping = entityBinding.getRootClass().getIdentifier();
		final SequenceStyleGenerator entityIdGenerator = (SequenceStyleGenerator) idMapping.createIdentifierGenerator(
				generatorFactory,
				new H2Dialect(),
				"",
				"",
				entityBinding.getRootClass()
		);

		final DatabaseStructure database1Structure = entityIdGenerator.getDatabaseStructure();

		// implicit name : `${entity-name}_seq`
		assertThat( database1Structure.getName(), equalToIgnoringCase( "tbl_1_SEQ" ) );
		assertThat( database1Structure.getIncrementSize(), is( 50 ) );
	}


	@Test
	public void testAutoGeneratedValueGenerator() {
		final StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder();
		final StandardServiceRegistry ssr = ssrb.build();

		final Metadata metadata = new MetadataSources( ssr )
				.addAnnotatedClass( Entity1.class )
				.addAnnotatedClass( Entity2.class )
				.buildMetadata();

		final DefaultIdentifierGeneratorFactory generatorFactory = new DefaultIdentifierGeneratorFactory();
		generatorFactory.injectServices( (ServiceRegistryImplementor) ssr );

		final PersistentClass entityBinding = metadata.getEntityBinding( Entity2.class.getName() );
		final KeyValue idMapping = entityBinding.getRootClass().getIdentifier();
		final SequenceStyleGenerator idGenerator = (SequenceStyleGenerator) idMapping.createIdentifierGenerator(
				generatorFactory,
				new H2Dialect(),
				"",
				"",
				entityBinding.getRootClass()
		);

		final DatabaseStructure database2Structure = idGenerator.getDatabaseStructure();

		// GeneratedValue#generator value
		assertThat( database2Structure.getName(), equalToIgnoringCase( "id_seq" ) );
		assertThat( database2Structure.getIncrementSize(), is( 50 ) );
	}

	@Test
	public void testCollectionId() {
		final StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder();
		final StandardServiceRegistry ssr = ssrb.build();

		final Metadata metadata = new MetadataSources( ssr )
				.addAnnotatedClass( Entity1.class )
				.addAnnotatedClass( Entity2.class )
				.buildMetadata();

		final DefaultIdentifierGeneratorFactory generatorFactory = new DefaultIdentifierGeneratorFactory();
		generatorFactory.injectServices( (ServiceRegistryImplementor) ssr );

		final PersistentClass entity1Binding = metadata.getEntityBinding( Entity1.class.getName() );

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Entity1#theTwos collection-id - implicit `${collection_table}_seq`

		final Property theTwos = entity1Binding.getProperty( "theTwos" );
		final IdentifierBag idBagMapping = (IdentifierBag) theTwos.getValue();
		final KeyValue collectionIdMapping = idBagMapping.getIdentifier();
		final SequenceStyleGenerator collectionIdGenerator = (SequenceStyleGenerator) collectionIdMapping.createIdentifierGenerator(
				generatorFactory,
				new H2Dialect(),
				"",
				"",
				null
		);

		final DatabaseStructure idBagIdGeneratorDbStructure = collectionIdGenerator.getDatabaseStructure();

		assertThat( idBagIdGeneratorDbStructure.getName(), equalToIgnoringCase( "tbl_2_seq" ) );
		assertThat( idBagIdGeneratorDbStructure.getIncrementSize(), is( 50 ) );
	}

	@Test
	public void testUuid() {
		final StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder();
		final StandardServiceRegistry ssr = ssrb.build();

		final Metadata metadata = new MetadataSources( ssr )
				.addAnnotatedClass( Entity4.class )
				.buildMetadata();

		final DefaultIdentifierGeneratorFactory generatorFactory = new DefaultIdentifierGeneratorFactory();
		generatorFactory.injectServices( (ServiceRegistryImplementor) ssr );

		final PersistentClass entityBinding = metadata.getEntityBinding( Entity4.class.getName() );
		final KeyValue idMapping = entityBinding.getRootClass().getIdentifier();
		final IdentifierGenerator idGenerator = idMapping.createIdentifierGenerator(
				generatorFactory,
				new H2Dialect(),
				"",
				"",
				entityBinding.getRootClass()
		);

		assertThat( idGenerator, instanceOf( UUIDGenerator.class ) );
	}

	@Test
	public void testIncrement() {
		final StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder();
		final StandardServiceRegistry ssr = ssrb.build();

		final Metadata metadata = new MetadataSources( ssr )
				.addAnnotatedClass( Entity3.class )
				.buildMetadata();

		final DefaultIdentifierGeneratorFactory generatorFactory = new DefaultIdentifierGeneratorFactory();
		generatorFactory.injectServices( (ServiceRegistryImplementor) ssr );

		final PersistentClass entityBinding = metadata.getEntityBinding( Entity3.class.getName() );
		final KeyValue idMapping = entityBinding.getRootClass().getIdentifier();
		final IdentifierGenerator idGenerator = idMapping.createIdentifierGenerator(
				generatorFactory,
				new H2Dialect(),
				"",
				"",
				entityBinding.getRootClass()
		);

		assertThat( idGenerator, instanceOf( IncrementGenerator.class ) );
	}

	@Entity( name = "Entity1" )
	@Table( name = "tbl_1" )
	public static class Entity1 {
		@Id
		@GeneratedValue( strategy = GenerationType.AUTO )
		private Integer id;

		@OneToMany( mappedBy = "theOne" )
		@CollectionId(
				columns = @Column( name = "child_" ),
				type = @Type( type = "int" ),
				generator = "sequence"
		)
		private Collection<Entity2> theTwos;
	}

	@Entity( name = "Entity2" )
	@Table( name = "tbl_2" )
	public static class Entity2 {
		@Id
		@GeneratedValue( strategy = GenerationType.AUTO, generator = "id_seq" )
		private Integer id;

		@ManyToOne
		@JoinColumn
		private Entity1 theOne;
	}

	@Entity( name = "Entity3" )
	@Table( name = "tbl_3" )
	public static class Entity3 {
		@Id
		@GeneratedValue( generator = "increment" )
		private Integer id;
		private String name;
	}

	@Entity( name = "Entity4" )
	@Table( name = "tbl_4" )
	public static class Entity4 {
		@Id
		@GeneratedValue
		private UUID id;
		private String name;
	}
}
